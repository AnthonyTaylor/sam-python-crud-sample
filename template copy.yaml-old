AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-python-service-availability

  SAM Template for sam-python-service-availability

Parameters:
  Table:
    Type: String
    Default: Services
  Region:
    Type: String
    Default: eu-west-2
  AWSEnv:
    Type: String
    Default: AWS
  Stage:
    Type: String
    Default: dev

Globals:
  Function:
    Timeout: 60

Resources:
  CreateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_service/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref Table
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateServices:
          Type: Api
          Properties:
            Path: /Services
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
  GetServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_Service/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref Table
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateServices:
          Type: Api
          Properties:
            Path: /Services/{id}
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
  ListServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_Services/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref Table
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateServices:
          Type: Api
          Properties:
            Path: /Services/
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
  UpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_Service/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref Table
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateServices:
          Type: Api
          Properties:
            Path: /Services/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
  DeleteServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_Service/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref Table
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateServices:
          Type: Api
          Properties:
            Path: /Services/{id}/{date}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
  ServiceStatusFunction:
    
  ServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
        -
          AttributeName: "date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "Services"

Outputs:
  ServicesApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Service Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/Services/"
  CreateServiceFunction:
    Description: "Create Service Lambda Function ARN"
    Value: !GetAtt CreateServiceFunction.Arn
  CreateServiceFunctionIamRole:
    Description: "Implicit IAM Role created for Create Service function"
    Value: !GetAtt CreateServiceFunctionRole.Arn
  GetServiceFunction:
    Description: "Get Service Lambda Function ARN"
    Value: !GetAtt GetServiceFunction.Arn
  GetServiceFunctionIamRole:
    Description: "Implicit IAM Role created for Get Service function"
    Value: !GetAtt GetServiceFunctionRole.Arn
  ListServicesFunction:
    Description: "List Services Lambda Function ARN"
    Value: !GetAtt ListServicesFunction.Arn
  ListServicesFunctionIamRole:
    Description: "Implicit IAM Role created for List Services function"
    Value: !GetAtt ListServicesFunctionRole.Arn
  UpdateServiceFunction:
    Description: "Update Service Lambda Function ARN"
    Value: !GetAtt UpdateServiceFunction.Arn
  UpdateServiceFunctionIamRole:
    Description: "Implicit IAM Role created for Update Service function"
    Value: !GetAtt UpdateServiceFunctionRole.Arn
  DeleteServiceFunction:
    Description: "Delete Service Lambda Function ARN"
    Value: !GetAtt DeleteServiceFunction.Arn
  DeleteServiceFunctionIamRole:
    Description: "Implicit IAM Role created for Delete Service function"
    Value: !GetAtt DeleteServiceFunctionRole.Arn
  ServicesTable:
    Description: "DynamoDB Table"
    Value: !Ref ServicesTable
  ServicesTableArn:
    Description: "DynamoDB Table ARN"
    Value: !GetAtt ServicesTable.Arn
